/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecucion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,20],$V2=[1,19],$V3=[1,7],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,18],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[2,5,10,11,19,23,26,27,28,29,33,38,44,49,51],$Vf=[2,5,10,11,19,23,26,27,28,29,33,38,42,44,47,48,49,51],$Vg=[1,31],$Vh=[1,44],$Vi=[1,39],$Vj=[1,45],$Vk=[1,38],$Vl=[1,37],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,52],$Vs=[1,57],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,64],$Vx=[1,67],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[14,15,18,21,37,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VO=[18,21],$VP=[2,5,10,11,19,23,26,27,28,29,33,38,40,42,44,47,48,49,51],$VQ=[11,19,23,26,27,28,29,33,38,42,44,47,48,49,51],$VR=[1,144],$VS=[14,18,37],$VT=[2,5,10,11,12,19,23,26,27,28,29,33,36,38,42,44,47,48,49,51,63,77,80,81,82,83,84,85],$VU=[1,157],$VV=[1,158],$VW=[1,159],$VX=[1,160],$VY=[14,15,18,21,37,62,63,68,69,70,71,72,73,74,75,76],$VZ=[14,15,18,21,37,62,63,66,67,68,69,70,71,72,73,74,75,76],$V_=[14,15,18,21,37,68,69,70,71,72,73,74,75,76],$V$=[14,15,18,21,37,72,73,74,75,76],$V01=[35,36],$V11=[1,184],$V21=[14,18,21,35,36,41],$V31=[14,15,18,21,36,37,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$V41=[1,203],$V51=[14,18],$V61=[18,21,35,36],$V71=[2,37],$V81=[42,47,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Contenido":4,"EOF":5,"Cont":6,"Instruc":7,"Funciones":8,"Instrucciones":9,"FUNCTION":10,"ID":11,"(":12,"Parametros":13,")":14,":":15,"Tipo":16,"InstruccionesSent":17,",":18,"CONSOLE":19,"Exp":20,";":21,"Sentencia_if":22,"FOR":23,"Declaracion":24,"Actualizacion":25,"WHILE":26,"DO":27,"BREAK":28,"CONTINUE":29,"Sent_switch":30,"Unario":31,"Llamada":32,"RETURN":33,"AccesoAsig":34,"=":35,"[":36,"]":37,"IF":38,"Sentencia_else":39,"ELSE":40,"{":41,"}":42,"InstruccionesSwitch":43,"SWITCH":44,"Cases":45,"Default":46,"CASE":47,"DEFAULT":48,"LET":49,"ListaDeclaracion":50,"CONST":51,"ListaDeclaracionConst":52,"OpcionDeclaracion":53,"Dim":54,"Dimensiones":55,"Expre":56,"OpcionDeclaracionConst":57,"NUMBER":58,"STRING":59,"BOOLEAN":60,"VOID":61,"+":62,"-":63,"**":64,"%":65,"*":66,"/":67,">":68,"<":69,">=":70,"<=":71,"==":72,"!=":73,"&&":74,"||":75,"?":76,"!":77,"AccesoArr":78,"F":79,"NUMERO":80,"CADENA":81,"CADENA2":82,"TRUE":83,"FALSE":84,"NULL":85,".":86,"LlamadaTypes":87,"++":88,"--":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"FUNCTION",11:"ID",12:"(",14:")",15:":",18:",",19:"CONSOLE",21:";",23:"FOR",26:"WHILE",27:"DO",28:"BREAK",29:"CONTINUE",33:"RETURN",35:"=",36:"[",37:"]",38:"IF",40:"ELSE",41:"{",42:"}",44:"SWITCH",47:"CASE",48:"DEFAULT",49:"LET",51:"CONST",58:"NUMBER",59:"STRING",60:"BOOLEAN",61:"VOID",62:"+",63:"-",64:"**",65:"%",66:"*",67:"/",68:">",69:"<",70:">=",71:"<=",72:"==",73:"!=",74:"&&",75:"||",76:"?",77:"!",80:"NUMERO",81:"CADENA",82:"CADENA2",83:"TRUE",84:"FALSE",85:"NULL",86:".",87:"LlamadaTypes",88:"++",89:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[9,2],[9,1],[8,8],[8,7],[8,6],[8,5],[13,5],[13,3],[7,5],[7,1],[7,8],[7,5],[7,7],[7,2],[7,2],[7,1],[7,1],[7,2],[7,2],[7,3],[7,5],[34,4],[34,3],[22,6],[39,2],[39,2],[39,0],[17,3],[17,2],[43,1],[43,0],[30,8],[45,5],[45,4],[46,3],[46,0],[25,1],[25,4],[24,3],[24,4],[24,3],[50,3],[50,1],[53,5],[53,3],[53,3],[53,1],[53,6],[53,4],[54,3],[54,2],[55,2],[55,3],[52,3],[52,1],[57,5],[57,3],[57,6],[32,3],[32,4],[56,3],[56,1],[16,1],[16,1],[16,1],[16,1],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,5],[20,2],[20,2],[20,3],[20,1],[20,1],[20,1],[20,1],[78,4],[78,4],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,3],[31,2],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 7:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 8: case 68:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 22: case 41: case 43:
 this.$ = $$[$0]; 
break;
case 6:
 
            //console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
            this.$= new Error_(this._$.first_line , this._$.first_column, 'Sintáctico',yytext,'');
        
break;
case 9:

            this.$ = new Funcion($$[$0-6],$$[$0-4],$$[$0-1],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 10:

            this.$ = new Funcion($$[$0-5], [],$$[$0-1],$$[$0] , _$[$0-6].first_line, _$[$0-6].first_column);
        
break;
case 11:

            this.$ = new Funcion($$[$0-4],$$[$0-2],Type.VOID,$$[$0],_$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 12:

            this.$ = new Funcion($$[$0-3], [],Type.VOID,$$[$0] , _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 13:

            $$[$0-4].push(new Simbolo(undefined,$$[$0-2],$$[$0]));
            this.$ = $$[$0-4];
        
break;
case 14:

            this.$ = [new Simbolo(undefined,$$[$0-2],$$[$0])];
        
break;
case 15:

             this.$ = new Console($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 16:

            this.$ = $$[$0];
        
break;
case 17:

            this.$ = new For($$[$0-5],$$[$0-4],$$[$0-2], $$[$0],_$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 18:

            this.$ = new While($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 19:

            this.$ = new DoWhile($$[$0-2],$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
        
break;
case 20:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 21:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 23:
this.$ = $$[$0];
break;
case 24:
this.$ = new InstrucUnaria($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 25:
 this.$ = $$[$0-1]; 
break;
case 26:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 27:

                this.$ =  new AccesoAsig($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 28:

            this.$.push($$[$0-1]);
        
break;
case 29:

            this.$ =[$$[$0-1]]
        
break;
case 30:

                this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
            
break;
case 31: case 32:
 this.$ = $$[$0];
break;
case 33:
 this.$ = null;
break;
case 34:

        this.$ = new Instrucciones($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 35:

        this.$ = new Instrucciones(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 36:

                        this.$ = new Instrucciones($$[$0], _$[$0].first_line, _$[$0].first_column);
                    
break;
case 37:

                        this.$ = new Instrucciones(new Array(), _$[$0].first_line, _$[$0].first_column);
                    
break;
case 38:

                this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1]);
            
break;
case 39:

        this.$.set($$[$0-2],$$[$0]); 
    
break;
case 40:

        let a = new Map();
        this.$ = a.set($$[$0-2],$$[$0]);
    
break;
case 44: case 46:

                this.$ = new Declaracion($$[$0-3],undefined,$$[$0-1],true, _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 45: case 47:

                this.$ = new ListDeclaracion($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
            
break;
case 48: case 60:
 $$[$0-2].push($$[$0]); 
break;
case 49: case 61:
 this.$ = [$$[$0]]; 
break;
case 50:

                    this.$ = new Declaracion($$[$0-4],$$[$0-2],$$[$0],false, _$[$0-4].first_line, _$[$0-4].first_column);
                
break;
case 51:

                    this.$ = new Declaracion($$[$0-2],$$[$0],undefined,false, _$[$0-2].first_line, _$[$0-2].first_column);
                
break;
case 52:

                    this.$ = new Declaracion($$[$0-2],undefined,$$[$0],false, _$[$0-2].first_line, _$[$0-2].first_column);
                
break;
case 53:

                    this.$ = new Declaracion($$[$0],undefined,undefined,false, _$[$0].first_line, _$[$0].first_column);
                
break;
case 54:

                     this.$ = new DecArreglo($$[$0-5],Type.ARREGLO,$$[$0-3],$$[$0-2],$$[$0],false,_$[$0-5].first_line, _$[$0-5].first_column);
                
break;
case 55:

                    this.$ = new DecArreglo($$[$0-3],Type.ARREGLO,$$[$0-1],$$[$0],undefined,false,_$[$0-3].first_line, _$[$0-3].first_column);
                
break;
case 56:

                 this.$=$$[$0-2]+1;
            
break;
case 57:

                this.$ =1;
            
break;
case 58:

                this.$ = new AsigArreglo(null,Type.ARREGLO,_$[$0-1].first_line,_$[$0-1].first_column);
            
break;
case 59:

                this.$ = new AsigArreglo($$[$0-1],Type.ARREGLO,_$[$0-2].first_line,_$[$0-2].first_column);
            
break;
case 62:

                    this.$ = new Declaracion($$[$0-4],$$[$0-2],$$[$0],false, _$[$0-4].first_line, _$[$0-4].first_column);
                    this.$.constante=true;
                
break;
case 63:

                    this.$ = new Declaracion($$[$0-2],undefined,$$[$0],false, _$[$0-2].first_line, _$[$0-2].first_column);
                    this.$.constante=true;
                
break;
case 65:

            this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 66:

            this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 67:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 69:
 this.$ = Type.NUMBER; 
break;
case 70:
 this.$ = Type.STRING; 
break;
case 71:
 this.$ = Type.BOOLEAN; 
break;
case 72:
 this.$ = Type.VOID; 
break;
case 73:

        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.SUMA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 74:

        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.RESTA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 75:
 
        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.POTENCIA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 76:
 
        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.MODULO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 77:
 
        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.MULT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 78:

        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 79:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 80:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 81:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 82:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 83:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 84:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 85:

        this.$ = new Logica($$[$0-2], $$[$0],LogicaOpcion.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 86:

        this.$ = new Logica($$[$0-2], $$[$0],LogicaOpcion.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 87:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 88:

        this.$ = new Logica($$[$0],null,LogicaOpcion.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 89:

        this.$ = new Aritmetico($$[$0],null, ArithmeticOption.RESTA, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 90:

        this.$ = $$[$0-1];
    
break;
case 91:
 this.$ = $$[$0]
break;
case 92:
  this.$ = $$[$0]; 
break;
case 93: case 94: case 103:

        this.$ = $$[$0];
    
break;
case 95:

            this.$= new Acceso(undefined,$$[$0-1],$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 96:

            this.$ = new Acceso($$[$0-3],$$[$0-1],null,_$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 97:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.NUMBER);
    
break;
case 98:

        this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, Type.STRING);
    
break;
case 99:

        this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, Type.STRING);
    
break;
case 100:

         this.$ = new Literal(true, _$[$0].first_line, _$[$0].first_column, Type.BOOLEAN);
    
break;
case 101:

        this.$ = new Literal(false, _$[$0].first_line, _$[$0].first_column, Type.BOOLEAN);
    
break;
case 102:

        this.$ = new Variable($$[$0],_$[$0].first_line, _$[$0].first_column);
    
break;
case 104:

        this.$ = new Literal(null, _$[$0].first_line, _$[$0].first_column, Type.NULL);
    
break;
case 106:

        this.$ = new Unario($$[$0-1],OperadorOpcion.INCRE,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 107:

        this.$ = new Unario($$[$0-1],OperadorOpcion.DECRE,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:$V1,11:$V2,19:$V3,22:8,23:$V4,24:15,26:$V5,27:$V6,28:$V7,29:$V8,30:14,31:16,32:17,33:$V9,38:$Va,44:$Vb,49:$Vc,51:$Vd},{1:[3]},{2:$V0,5:[1,25],6:26,7:4,8:5,10:$V1,11:$V2,19:$V3,22:8,23:$V4,24:15,26:$V5,27:$V6,28:$V7,29:$V8,30:14,31:16,32:17,33:$V9,38:$Va,44:$Vb,49:$Vc,51:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),{12:[1,27]},o($Vf,[2,16]),{12:[1,28]},{12:[1,29]},{17:30,41:$Vg},{21:[1,32]},{21:[1,33]},o($Vf,[2,22]),o($Vf,[2,23]),{21:[1,34]},{21:[1,35]},{11:$Vh,12:$Vi,20:36,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:$Vs,34:53,35:$Vt,36:[1,58],88:$Vu,89:$Vv},{11:[1,59]},{12:[1,60]},{12:[1,61]},{11:$Vw,50:62,53:63},{11:$Vx,52:65,57:66},{1:[2,1]},o($Ve,[2,2]),{11:$Vh,12:$Vi,20:68,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:[1,70],24:69,49:$Vc,51:$Vd},{11:$Vh,12:$Vi,20:71,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{26:[1,72]},{7:75,9:73,11:$V2,19:$V3,22:8,23:$V4,24:15,26:$V5,27:$V6,28:$V7,29:$V8,30:14,31:16,32:17,33:$V9,38:$Va,42:[1,74],44:$Vb,49:$Vc,51:$Vd},o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,24]),o($Vf,[2,25]),{21:[1,76],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{11:$Vh,12:$Vi,20:92,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:93,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:94,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VN,[2,91]),o($VN,[2,92]),o($VN,[2,93],{36:[1,95]}),o($VN,[2,94]),o($VN,[2,102],{12:$Vs,36:[1,96],86:[1,97],88:$Vu,89:$Vv}),{11:$Vh,12:$Vi,20:100,31:40,32:51,36:$Vj,37:[1,98],55:41,56:99,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VN,[2,97]),o($VN,[2,98]),o($VN,[2,99]),o($VN,[2,100]),o($VN,[2,101]),o($VN,[2,103]),o($VN,[2,104]),{35:[1,101],36:[1,102]},{11:$Vh,12:$Vi,20:103,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VN,[2,106]),o($VN,[2,107]),{11:$Vh,12:$Vi,14:[1,104],20:100,31:40,32:51,36:$Vj,55:41,56:105,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:106,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:[1,107]},{11:$Vh,12:$Vi,20:108,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:109,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{18:[1,111],21:[1,110]},o($VO,[2,49]),o($VO,[2,53],{15:[1,112],35:[1,113]}),{18:[1,115],21:[1,114]},o($VO,[2,61]),{15:[1,116],35:[1,117]},{14:[1,118],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{11:$Vh,12:$Vi,20:119,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{35:$Vt},{14:[1,120],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{12:[1,121]},{7:123,11:$V2,19:$V3,22:8,23:$V4,24:15,26:$V5,27:$V6,28:$V7,29:$V8,30:14,31:16,32:17,33:$V9,38:$Va,42:[1,122],44:$Vb,49:$Vc,51:$Vd},o($VP,[2,35]),o($VQ,[2,8]),o($Vf,[2,26]),{11:$Vh,12:$Vi,20:124,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:125,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:126,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:127,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:128,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:129,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:130,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:131,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:132,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:133,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:134,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:135,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:136,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:137,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:138,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VN,[2,88]),o($VN,[2,89]),{14:[1,139],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{11:$Vh,12:$Vi,20:140,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:141,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{87:[1,142]},o($VN,[2,58]),{18:$VR,37:[1,143]},o($VS,[2,68],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),{11:$Vh,12:$Vi,20:145,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{11:$Vh,12:$Vi,20:146,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{21:[1,147],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},o($VN,[2,65]),{14:[1,148],18:$VR},{37:[1,149],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{11:[1,152],13:150,14:[1,151]},{14:[1,153],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{14:[1,154],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},o($VT,[2,45]),{11:$Vw,53:155},{16:156,58:$VU,59:$VV,60:$VW,61:$VX},{11:$Vh,12:$Vi,20:161,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VT,[2,47]),{11:$Vx,57:162},{16:163,58:$VU,59:$VV,60:$VW,61:$VX},{11:$Vh,12:$Vi,20:164,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{21:[1,165]},{21:[1,166],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{17:167,41:$Vg},{11:$Vh,12:$Vi,20:168,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VP,[2,34]),o($VQ,[2,7]),o($VY,[2,73],{64:$VA,65:$VB,66:$VC,67:$VD}),o($VY,[2,74],{64:$VA,65:$VB,66:$VC,67:$VD}),o($VN,[2,75]),o($VN,[2,76]),o($VZ,[2,77],{64:$VA,65:$VB}),o($VZ,[2,78],{64:$VA,65:$VB}),o($V_,[2,79],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($V_,[2,80],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($V_,[2,81],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($V_,[2,82],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($V$,[2,83],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH}),o($V$,[2,84],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH}),o([14,15,18,21,37,74,75,76],[2,85],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ}),o([14,15,18,21,37,75,76],[2,86],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),{15:[1,169],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},o($VN,[2,90]),{37:[1,170],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{37:[1,171],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},o($VN,[2,105]),o($VN,[2,59]),{11:$Vh,12:$Vi,20:172,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{21:[1,173],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{37:[1,174],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},o($VT,[2,46]),o($VN,[2,66]),o($V01,[2,29]),{14:[1,175],18:[1,176]},{15:[1,177],17:178,41:$Vg},{15:[1,179]},{17:180,41:$Vg},{41:[1,181]},o($VO,[2,48]),o($VO,[2,51],{54:183,35:[1,182],36:$V11}),o($V21,[2,69]),o($V21,[2,70]),o($V21,[2,71]),o($V21,[2,72]),o($VO,[2,52],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($VO,[2,60]),{35:[1,185],36:$V11,54:186},o($VO,[2,63],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($Vf,[2,15]),{11:[1,189],25:187,31:188},o($Vf,[2,18]),{14:[1,190],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{11:$Vh,12:$Vi,20:191,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($V31,[2,95]),o($V31,[2,96]),o($VS,[2,67],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($Vf,[2,27]),o($V01,[2,28]),{15:[1,192],17:193,41:$Vg},{11:[1,194]},{16:195,58:$VU,59:$VV,60:$VW,61:$VX},o($Ve,[2,12]),{16:196,58:$VU,59:$VV,60:$VW,61:$VX},o($Vf,[2,33],{39:197,40:[1,198]}),{45:199,47:[1,200]},{11:$Vh,12:$Vi,20:201,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VO,[2,55],{35:[1,202],36:$V41}),{37:[1,204]},{11:$Vh,12:$Vi,20:205,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{35:[1,206],36:$V41},{14:[1,207]},{14:[2,43]},{35:[1,208],88:$Vu,89:$Vv},{21:[1,209]},o([14,15,18,21,37],[2,87],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),{16:210,58:$VU,59:$VV,60:$VW,61:$VX},o($Ve,[2,11]),{15:[1,211]},{17:212,41:$Vg},o($V51,[2,14]),o($Vf,[2,30]),{17:214,22:213,38:$Va,41:$Vg},{42:[2,42],46:215,47:[1,216],48:[1,217]},{11:$Vh,12:$Vi,20:218,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VO,[2,50],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),{11:$Vh,12:$Vi,20:219,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{37:[1,220]},o($V61,[2,57]),o($VO,[2,62],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),{36:$Vj,55:221},{17:222,41:$Vg},{11:$Vh,12:$Vi,20:223,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($Vf,[2,19]),{17:224,41:$Vg},{16:225,58:$VU,59:$VV,60:$VW,61:$VX},o($Ve,[2,10]),o($Vf,[2,31]),o($Vf,[2,32]),{42:[1,226]},{11:$Vh,12:$Vi,20:227,31:40,32:51,36:$Vj,55:41,63:$Vk,77:$Vl,78:42,79:43,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{15:[1,228]},{15:[1,229],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},o($VO,[2,54],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($V61,[2,56]),o($VO,[2,64]),o($Vf,[2,17]),{21:[1,230],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},o($Ve,[2,9]),o($V51,[2,13]),o($Vf,[2,38]),{15:[1,231],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM},{7:75,9:233,11:$V2,19:$V3,22:8,23:$V4,24:15,26:$V5,27:$V6,28:$V7,29:$V8,30:14,31:16,32:17,33:$V9,38:$Va,42:$V71,43:232,44:$Vb,49:$Vc,51:$Vd},o($V81,$V71,{22:8,30:14,24:15,31:16,32:17,7:75,9:233,43:234,11:$V2,19:$V3,23:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,38:$Va,44:$Vb,49:$Vc,51:$Vd}),{14:[2,44]},o($V81,$V71,{22:8,30:14,24:15,31:16,32:17,7:75,9:233,43:235,11:$V2,19:$V3,23:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,38:$Va,44:$Vb,49:$Vc,51:$Vd}),{42:[2,41]},o($V81,[2,36],{22:8,30:14,24:15,31:16,32:17,7:123,11:$V2,19:$V3,23:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,38:$Va,44:$Vb,49:$Vc,51:$Vd}),o($V81,[2,40]),o($V81,[2,39])],
defaultActions: {25:[2,1],188:[2,43],230:[2,44],232:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { ArithmeticOption,Aritmetico} = require('../Expresiones/Aritmetico');
    const {Relacional, RelationalOption} = require('../Expresiones/Relacional');
    const {Logica, LogicaOpcion} = require('../Expresiones/Logica');
    const {Literal} = require('../Expresiones/Literal');
    const {Variable} = require('../Expresiones/Variable');
    const {Unario,OperadorOpcion} = require('../Expresiones/Unario');
    const {Ternario} = require('../Expresiones/Ternario');
    const {AsigArreglo} = require('../Expresiones/AsigArreglo');
    const {Return} = require('../Instruccion/Return');
    const {Console} = require('../Instruccion/Console');
    const {errores,Error_} = require('../Reportes/Errores');
    const { Type } = require("../Modelos/Retorno");
    const {If} = require('../Instruccion/If');
    const {Switch} = require('../Instruccion/Switch');
    const {Declaracion} = require('../Instruccion/Declaracion');
    const {ListDeclaracion} = require('../Instruccion/ListDeclaracion');
    const {Break,Continue,TipoEscape} = require('../Instruccion/BreakContinue');
    const {While,DoWhile} = require('../Instruccion/While');
    const {For} = require('../Instruccion/For');
    const {Instrucciones} = require('../Instruccion/Instrucciones');
    const {InstrucUnaria} = require('../Instruccion/InstrucUnaria');
    const {Funcion} = require('../Instruccion/Funcion');
    const {Llamada} = require('../Instruccion/Llamada');
    const {DecArreglo} = require('../Instruccion/DecArreglo');
    const {Arreglo} = require('../Estructuras/Arreglo');
    const {Acceso} = require('../Estructuras/Acceso');
    const {AccesoAsig} = require('../Estructuras/AccesoAsig');
    const {Simbolo} = require('../Entornos/Environment');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 80
break;
case 4:return 81
break;
case 5:return 82
break;
case 6:return 58
break;
case 7:return 59
break;
case 8:return 60
break;
case 9:return 83
break;
case 10:return 84
break;
case 11:return 61
break;
case 12:return 'TYPE'   
break;
case 13:return 49
break;
case 14:return 51
break;
case 15:return 19
break;
case 16:return 38
break;
case 17:return 40
break;
case 18:return 44
break;
case 19:return 47
break;
case 20:return 48
break;
case 21:return 26
break;
case 22:return 28
break;
case 23:return 29
break;
case 24:return 23
break;
case 25:return 10
break;
case 26:return 33
break;
case 27:return 27
break;
case 28:return 85
break;
case 29:return 88
break;
case 30:return 89
break;
case 31:return 62
break;
case 32:return 63
break;
case 33:return 64
break;
case 34:return 66
break;
case 35:return 67
break;
case 36:return 65
break;
case 37:return 70
break;
case 38:return 71
break;
case 39:return 68
break;
case 40:return 69
break;
case 41:return 72
break;
case 42:return 73
break;
case 43:return 74
break;
case 44:return 75
break;
case 45:return 77
break;
case 46:return 76
break;
case 47:return 15
break;
case 48:return 35  
break;
case 49:return 12
break;
case 50:return 14 
break;
case 51:return 41
break;
case 52:return 42
break;
case 53:return 36
break;
case 54:return 37  
break;
case 55:return 21
break;
case 56:return 18
break;
case 57:return 11
break;
case 58:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:(("[^"]*")))/,/^(?:(('[^"]*')))/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\.log\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:do\b)/,/^(?:null\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecucion;
exports.Parser = ejecucion.Parser;
exports.parse = function () { return ejecucion.parse.apply(ejecucion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}