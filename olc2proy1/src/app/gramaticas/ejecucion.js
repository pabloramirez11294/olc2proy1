/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecucion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,21],$V2=[1,20],$V3=[1,7],$V4=[1,8],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,19],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[2,5,10,11,21,24,26,30,31,32,33,37,45,51,56,58],$Vg=[2,5,10,11,21,24,26,30,31,32,33,37,45,49,51,54,55,56,58],$Vh=[1,33],$Vi=[1,47],$Vj=[1,42],$Vk=[1,48],$Vl=[1,41],$Vm=[1,40],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,55],$Vt=[1,61],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,68],$Vy=[1,71],$Vz=[1,98],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[1,97],$VP=[14,15,18,23,40,44,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$VQ=[18,23],$VR=[1,126],$VS=[14,18,44],$VT=[2,5,10,11,21,24,26,30,31,32,33,37,45,47,49,51,54,55,56,58],$VU=[11,21,24,26,30,31,32,33,37,45,49,51,54,55,56,58],$VV=[14,15,18,23,44,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$VW=[1,165],$VX=[2,5,10,11,12,21,24,26,30,31,32,33,37,43,45,49,51,54,55,56,58,68,82,85,86,87,88,89,90],$VY=[1,170],$VZ=[1,171],$V_=[1,172],$V$=[1,173],$V01=[14,15,18,23,44,67,68,73,74,75,76,77,78,79,80,81],$V11=[14,15,18,23,44,67,68,70,71,72,73,74,75,76,77,78,79,80,81],$V21=[14,15,18,23,44,73,74,75,76,77,78,79,80,81],$V31=[14,15,18,23,44,77,78,79,80,81],$V41=[39,43],$V51=[14,18],$V61=[1,201],$V71=[14,18,23,39,43,48],$V81=[14,15,18,23,40,43,44,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$V91=[1,224],$Va1=[14,18,23,39,43],$Vb1=[2,43],$Vc1=[49,54,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Contenido":4,"EOF":5,"Cont":6,"Instruc":7,"Funciones":8,"Instrucciones":9,"FUNCTION":10,"ID":11,"(":12,"Parametros":13,")":14,":":15,"Tipo":16,"InstruccionesSent":17,",":18,"OpcionParam":19,"Dim":20,"CONSOLE":21,"Expre":22,";":23,"GRAFICARTS":24,"Sentencia_if":25,"FOR":26,"Declaracion":27,"Exp":28,"Actualizacion":29,"WHILE":30,"DO":31,"BREAK":32,"CONTINUE":33,"Sent_switch":34,"Unario":35,"Llamada":36,"RETURN":37,"AccesoAsig":38,"=":39,".":40,"POP":41,"PUSH":42,"[":43,"]":44,"IF":45,"Sentencia_else":46,"ELSE":47,"{":48,"}":49,"InstruccionesSwitch":50,"SWITCH":51,"Cases":52,"Default":53,"CASE":54,"DEFAULT":55,"LET":56,"ListaDeclaracion":57,"CONST":58,"ListaDeclaracionConst":59,"OpcionDeclaracion":60,"OpcionDeclaracionConst":61,"Dimensiones":62,"NUMBER":63,"STRING":64,"BOOLEAN":65,"VOID":66,"+":67,"-":68,"**":69,"%":70,"*":71,"/":72,">":73,"<":74,">=":75,"<=":76,"==":77,"!=":78,"&&":79,"||":80,"?":81,"!":82,"AccesoArr":83,"F":84,"NUMERO":85,"CADENA":86,"CADENA2":87,"TRUE":88,"FALSE":89,"NULL":90,"LENGTH":91,"++":92,"--":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"FUNCTION",11:"ID",12:"(",14:")",15:":",18:",",21:"CONSOLE",23:";",24:"GRAFICARTS",26:"FOR",30:"WHILE",31:"DO",32:"BREAK",33:"CONTINUE",37:"RETURN",39:"=",40:".",41:"POP",42:"PUSH",43:"[",44:"]",45:"IF",47:"ELSE",48:"{",49:"}",51:"SWITCH",54:"CASE",55:"DEFAULT",56:"LET",58:"CONST",63:"NUMBER",64:"STRING",65:"BOOLEAN",66:"VOID",67:"+",68:"-",69:"**",70:"%",71:"*",72:"/",73:">",74:"<",75:">=",76:"<=",77:"==",78:"!=",79:"&&",80:"||",81:"?",82:"!",85:"NUMERO",86:"CADENA",87:"CADENA2",88:"TRUE",89:"FALSE",90:"NULL",91:"LENGTH",92:"++",93:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[9,2],[9,1],[8,8],[8,7],[8,6],[8,5],[13,3],[13,1],[19,4],[19,3],[7,5],[7,4],[7,1],[7,8],[7,5],[7,7],[7,2],[7,2],[7,1],[7,1],[7,2],[7,2],[7,3],[7,2],[7,5],[7,6],[7,7],[38,4],[38,3],[25,6],[46,2],[46,2],[46,0],[17,3],[17,2],[50,1],[50,0],[34,8],[52,5],[52,4],[53,3],[53,0],[29,1],[29,4],[27,3],[27,4],[27,3],[57,3],[57,1],[60,5],[60,3],[60,3],[60,1],[60,6],[60,4],[61,5],[61,3],[61,6],[20,3],[20,2],[62,2],[62,3],[59,3],[59,1],[36,3],[36,4],[22,3],[22,1],[16,1],[16,1],[16,1],[16,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,5],[28,2],[28,2],[28,3],[28,1],[28,1],[28,1],[28,1],[83,4],[83,4],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,3],[84,5],[84,6],[35,2],[35,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 7:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 8: case 74:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 25: case 47: case 49:
 this.$ = $$[$0]; 
break;
case 6:
 
            //console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
            this.$= new Error_(this._$.first_line , this._$.first_column, 'Sintáctico',yytext,'');
        
break;
case 9:

            this.$ = new Funcion($$[$0-6],$$[$0-4],$$[$0-1],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 10:

            this.$ = new Funcion($$[$0-5], [],$$[$0-1],$$[$0] , _$[$0-6].first_line, _$[$0-6].first_column);
        
break;
case 11:

            this.$ = new Funcion($$[$0-4],$$[$0-2],Type.VOID,$$[$0],_$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 12:

            this.$ = new Funcion($$[$0-3], [],Type.VOID,$$[$0] , _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 13:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 14:

            this.$ = [$$[$0]];
        
break;
case 15:

            let sim=new Simbolo(undefined,$$[$0-3],Type.ARREGLO);
            sim.tipoArreglo=$$[$0-1];
            sim.dim = $$[$0];
            this.$ = sim;
        
break;
case 16:

            this.$ = new Simbolo(undefined,$$[$0-2],$$[$0]);
        
break;
case 17:

             this.$ = new Console($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 18:

             this.$ = new Graficarts(_$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 19:

            this.$ = $$[$0];
        
break;
case 20:

            this.$ = new For($$[$0-5],$$[$0-4],$$[$0-2], $$[$0],_$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 21:

            this.$ = new While($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 22:

            this.$ = new DoWhile($$[$0-2],$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
        
break;
case 23:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 24:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 26:
this.$ = $$[$0];
break;
case 27:
this.$ = new InstrucUnaria($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 28:
 this.$ = $$[$0-1]; 
break;
case 29:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 30:
 this.$ = new Return(undefined,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 31:

                this.$ =  new AccesoAsig($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 32:

            this.$ = new Pop(undefined,$$[$0-5],_$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 33:

            this.$ = new Push(undefined,$$[$0-6],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column);
        
break;
case 34:

            this.$.push($$[$0-1]);
        
break;
case 35:

            this.$ =[$$[$0-1]]
        
break;
case 36:

                this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
            
break;
case 37: case 38:
 this.$ = $$[$0];
break;
case 39:
 this.$ = null;
break;
case 40:

        this.$ = new Instrucciones($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 41:

        this.$ = new Instrucciones(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 42:

                        this.$ = new Instrucciones($$[$0], _$[$0].first_line, _$[$0].first_column);
                    
break;
case 43:

                        this.$ = new Instrucciones(new Array(), _$[$0].first_line, _$[$0].first_column);
                    
break;
case 44:

                this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1]);
            
break;
case 45:

        this.$.set($$[$0-2],$$[$0]); 
    
break;
case 46:

        let a = new Map();
        this.$ = a.set($$[$0-2],$$[$0]);
    
break;
case 50: case 52:

                this.$ = new Declaracion($$[$0-3],undefined,$$[$0-1],true, _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 51: case 53:

                this.$ = new ListDeclaracion($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
            
break;
case 54: case 69:
 $$[$0-2].push($$[$0]); 
break;
case 55: case 70:
 this.$ = [$$[$0]]; 
break;
case 56:

                    this.$ = new Declaracion($$[$0-4],$$[$0-2],$$[$0],false, _$[$0-4].first_line, _$[$0-4].first_column);
                
break;
case 57:

                    this.$ = new Declaracion($$[$0-2],$$[$0],undefined,false, _$[$0-2].first_line, _$[$0-2].first_column);
                
break;
case 58:

                    this.$ = new Declaracion($$[$0-2],undefined,$$[$0],false, _$[$0-2].first_line, _$[$0-2].first_column);
                
break;
case 59:

                    this.$ = new Declaracion($$[$0],undefined,undefined,false, _$[$0].first_line, _$[$0].first_column);
                
break;
case 60:

                     this.$ = new DecArreglo($$[$0-5],Type.ARREGLO,$$[$0-3],$$[$0-2],$$[$0],false,_$[$0-5].first_line, _$[$0-5].first_column);
                
break;
case 61:

                    this.$ = new DecArreglo($$[$0-3],Type.ARREGLO,$$[$0-1],$$[$0],undefined,false,_$[$0-3].first_line, _$[$0-3].first_column);
                
break;
case 62:

                    this.$ = new Declaracion($$[$0-4],$$[$0-2],$$[$0],false, _$[$0-4].first_line, _$[$0-4].first_column);
                    this.$.constante=true;
                
break;
case 63:

                    this.$ = new Declaracion($$[$0-2],undefined,$$[$0],false, _$[$0-2].first_line, _$[$0-2].first_column);
                    this.$.constante=true;
                
break;
case 64:

                     this.$ = new DecArreglo($$[$0-5],Type.ARREGLO,$$[$0-3],$$[$0-2],$$[$0],false,_$[$0-5].first_line, _$[$0-5].first_column);
                     this.$.constante=true;
                
break;
case 65:

                 this.$=$$[$0-2]+1;
            
break;
case 66:

                this.$ =1;
            
break;
case 67:

                this.$ = new AsigArreglo(null,Type.ARREGLO,_$[$0-1].first_line,_$[$0-1].first_column);
            
break;
case 68:

                this.$ = new AsigArreglo($$[$0-1],Type.ARREGLO,_$[$0-2].first_line,_$[$0-2].first_column);
            
break;
case 71:

            this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 72:

            this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 73:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 75:
 this.$ = Type.NUMBER; 
break;
case 76:
 this.$ = Type.STRING; 
break;
case 77:
 this.$ = Type.BOOLEAN; 
break;
case 78:
 this.$ = Type.VOID; 
break;
case 79:

        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.SUMA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 80:

        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.RESTA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 81:
 
        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.POTENCIA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 82:
 
        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.MODULO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 83:
 
        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.MULT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 84:

        this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 85:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 86:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 87:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 88:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 89:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 90:

        this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 91:

        this.$ = new Logica($$[$0-2], $$[$0],LogicaOpcion.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 92:

        this.$ = new Logica($$[$0-2], $$[$0],LogicaOpcion.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 93:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 94:

        this.$ = new Logica($$[$0],null,LogicaOpcion.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 95:

        this.$ = new Aritmetico($$[$0],null, ArithmeticOption.RESTA, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 96:

        this.$ = $$[$0-1];
    
break;
case 97:
 this.$ = $$[$0]
break;
case 98:
  this.$ = $$[$0]; 
break;
case 99: case 100: case 109:

        this.$ = $$[$0];
    
break;
case 101:

            this.$= new Acceso(undefined,$$[$0-1],$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 102:

            this.$ = new Acceso($$[$0-3],$$[$0-1],null,_$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 103:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.NUMBER);
    
break;
case 104:

        let txt=$$[$0].replace(/\\n/g,"\n");
        txt = txt.replace(/\\t/g,"\t");
        txt = txt.replace(/\\r/g,"\r");
        this.$ = new Literal(txt.replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, Type.STRING);
    
break;
case 105:

        let txt2=$$[$0].replace(/\\n/g,"\n");
        txt2 = txt2.replace(/\\t/g,"\t");
        txt2 = txt2.replace(/\\r/g,"\r");
        this.$ = new Literal(txt2.replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, Type.STRING);
    
break;
case 106:

         this.$ = new Literal(true, _$[$0].first_line, _$[$0].first_column, Type.BOOLEAN);
    
break;
case 107:

        this.$ = new Literal(false, _$[$0].first_line, _$[$0].first_column, Type.BOOLEAN);
    
break;
case 108:

        this.$ = new Variable($$[$0],_$[$0].first_line, _$[$0].first_column);
    
break;
case 110:

        this.$ = new Literal(null, _$[$0].first_line, _$[$0].first_column, Type.NULL);
    
break;
case 111:

        this.$ = new Length($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 112:

        this.$ = new Pop($$[$0-4],undefined,_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 113:

        this.$ = new Push($$[$0-5],undefined,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 114:

        this.$ = new Unario($$[$0-1],OperadorOpcion.INCRE,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 115:

        this.$ = new Unario($$[$0-1],OperadorOpcion.DECRE,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:$V1,11:$V2,21:$V3,24:$V4,25:9,26:$V5,27:16,30:$V6,31:$V7,32:$V8,33:$V9,34:15,35:17,36:18,37:$Va,45:$Vb,51:$Vc,56:$Vd,58:$Ve},{1:[3]},{2:$V0,5:[1,26],6:27,7:4,8:5,10:$V1,11:$V2,21:$V3,24:$V4,25:9,26:$V5,27:16,30:$V6,31:$V7,32:$V8,33:$V9,34:15,35:17,36:18,37:$Va,45:$Vb,51:$Vc,56:$Vd,58:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),{12:[1,28]},{12:[1,29]},o($Vg,[2,19]),{12:[1,30]},{12:[1,31]},{17:32,48:$Vh},{23:[1,34]},{23:[1,35]},o($Vg,[2,25]),o($Vg,[2,26]),{23:[1,36]},{23:[1,37]},{11:$Vi,12:$Vj,23:[1,39],28:38,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{12:$Vt,38:56,39:$Vu,40:[1,57],43:[1,62],92:$Vv,93:$Vw},{11:[1,63]},{12:[1,64]},{12:[1,65]},{11:$Vx,57:66,60:67},{11:$Vy,59:69,61:70},{1:[2,1]},o($Vf,[2,2]),{11:$Vi,12:$Vj,22:72,28:73,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{14:[1,74]},{11:[1,76],27:75,56:$Vd,58:$Ve},{11:$Vi,12:$Vj,28:77,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{30:[1,78]},{7:81,9:79,11:$V2,21:$V3,24:$V4,25:9,26:$V5,27:16,30:$V6,31:$V7,32:$V8,33:$V9,34:15,35:17,36:18,37:$Va,45:$Vb,49:[1,80],51:$Vc,56:$Vd,58:$Ve},o($Vg,[2,23]),o($Vg,[2,24]),o($Vg,[2,27]),o($Vg,[2,28]),{23:[1,82],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($Vg,[2,30]),{11:$Vi,12:$Vj,28:99,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:100,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:101,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($VP,[2,97]),o($VP,[2,98]),o($VP,[2,99],{43:[1,102]}),o($VP,[2,100]),o($VP,[2,108],{12:$Vt,43:[1,103],92:$Vv,93:$Vw}),{11:$Vi,12:$Vj,22:105,28:73,35:43,36:54,43:$Vk,44:[1,104],62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,105]),o($VP,[2,106]),o($VP,[2,107]),o($VP,[2,109]),o($VP,[2,110]),{39:[1,106],43:[1,107]},{41:[1,108],42:[1,109]},{11:$Vi,12:$Vj,28:110,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($VP,[2,114]),o($VP,[2,115]),{11:$Vi,12:$Vj,14:[1,111],22:112,28:73,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:113,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{12:[1,114]},{11:$Vi,12:$Vj,28:115,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:116,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{18:[1,118],23:[1,117]},o($VQ,[2,55]),o($VQ,[2,59],{15:[1,119],39:[1,120]}),{18:[1,122],23:[1,121]},o($VQ,[2,70]),{15:[1,123],39:[1,124]},{14:[1,125],18:$VR},o($VS,[2,74],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),{23:[1,127]},{11:$Vi,12:$Vj,28:128,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{39:$Vu},{14:[1,129],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{12:[1,130]},{7:132,11:$V2,21:$V3,24:$V4,25:9,26:$V5,27:16,30:$V6,31:$V7,32:$V8,33:$V9,34:15,35:17,36:18,37:$Va,45:$Vb,49:[1,131],51:$Vc,56:$Vd,58:$Ve},o($VT,[2,41]),o($VU,[2,8]),o($Vg,[2,29]),{11:$Vi,12:$Vj,28:133,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:134,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:135,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:136,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:137,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:138,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:139,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:140,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:141,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:142,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:143,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:144,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:145,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:146,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:147,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{41:[1,149],42:[1,150],91:[1,148]},o($VV,[2,94],{40:$Vz}),o($VV,[2,95],{40:$Vz}),{14:[1,151],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{11:$Vi,12:$Vj,28:152,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:153,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($VP,[2,67]),{18:$VR,44:[1,154]},{11:$Vi,12:$Vj,28:155,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{11:$Vi,12:$Vj,28:156,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{12:[1,157]},{12:[1,158]},{23:[1,159],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($VP,[2,71]),{14:[1,160],18:$VR},{40:$Vz,44:[1,161],67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{11:$VW,13:162,14:[1,163],19:164},{14:[1,166],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{14:[1,167],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($VX,[2,51]),{11:$Vx,60:168},{16:169,63:$VY,64:$VZ,65:$V_,66:$V$},{11:$Vi,12:$Vj,28:174,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($VX,[2,53]),{11:$Vy,61:175},{16:176,63:$VY,64:$VZ,65:$V_,66:$V$},{11:$Vi,12:$Vj,28:177,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{23:[1,178]},{11:$Vi,12:$Vj,28:179,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($Vg,[2,18]),{23:[1,180],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{17:181,48:$Vh},{11:$Vi,12:$Vj,28:182,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($VT,[2,40]),o($VU,[2,7]),o($V01,[2,79],{40:$Vz,69:$VC,70:$VD,71:$VE,72:$VF}),o($V01,[2,80],{40:$Vz,69:$VC,70:$VD,71:$VE,72:$VF}),o($VV,[2,81],{40:$Vz}),o($V11,[2,82],{40:$Vz,69:$VC}),o($V11,[2,83],{40:$Vz,69:$VC}),o($V11,[2,84],{40:$Vz,69:$VC}),o($V21,[2,85],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($V21,[2,86],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($V21,[2,87],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($V21,[2,88],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($V31,[2,89],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ}),o($V31,[2,90],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ}),o([14,15,18,23,44,79,80,81],[2,91],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o([14,15,18,23,44,80,81],[2,92],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM}),{15:[1,183],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($VP,[2,111]),{12:[1,184]},{12:[1,185]},o($VP,[2,96]),{40:$Vz,44:[1,186],67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{40:$Vz,44:[1,187],67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($VP,[2,68]),{23:[1,188],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{40:$Vz,44:[1,189],67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{14:[1,190]},{11:$Vi,12:$Vj,28:191,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($VX,[2,52]),o($VP,[2,72]),o($V41,[2,35]),{14:[1,192],18:[1,193]},{15:[1,194],17:195,48:$Vh},o($V51,[2,14]),{15:[1,196]},{17:197,48:$Vh},{48:[1,198]},o($VQ,[2,54]),o($VQ,[2,57],{20:200,39:[1,199],43:$V61}),o($V71,[2,75]),o($V71,[2,76]),o($V71,[2,77]),o($V71,[2,78]),o($VQ,[2,58],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($VQ,[2,69]),{20:203,39:[1,202],43:$V61},o($VQ,[2,63],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($Vg,[2,17]),o($VS,[2,73],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),{11:[1,206],29:204,35:205},o($Vg,[2,21]),{14:[1,207],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{11:$Vi,12:$Vj,28:208,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{14:[1,209]},{11:$Vi,12:$Vj,28:210,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($V81,[2,101]),o($V81,[2,102]),o($Vg,[2,31]),o($V41,[2,34]),{23:[1,211]},{14:[1,212],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{15:[1,213],17:214,48:$Vh},{11:$VW,19:215},{16:216,63:$VY,64:$VZ,65:$V_,66:$V$},o($Vf,[2,12]),{16:217,63:$VY,64:$VZ,65:$V_,66:$V$},o($Vg,[2,39],{46:218,47:[1,219]}),{52:220,54:[1,221]},{11:$Vi,12:$Vj,28:222,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($VQ,[2,61],{39:[1,223],43:$V91}),{44:[1,225]},{11:$Vi,12:$Vj,28:226,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{39:[1,227],43:$V91},{14:[1,228]},{14:[2,49]},{39:[1,229],92:$Vv,93:$Vw},{23:[1,230]},o([14,15,18,23,44],[2,93],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($VP,[2,112]),{14:[1,231],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($Vg,[2,32]),{23:[1,232]},{16:233,63:$VY,64:$VZ,65:$V_,66:$V$},o($Vf,[2,11]),o($V51,[2,13]),{17:234,48:$Vh},o($V51,[2,16],{20:235,43:$V61}),o($Vg,[2,36]),{17:237,25:236,45:$Vb,48:$Vh},{49:[2,48],53:238,54:[1,239],55:[1,240]},{11:$Vi,12:$Vj,28:241,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($VQ,[2,56],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),{11:$Vi,12:$Vj,28:242,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{44:[1,243]},o($Va1,[2,66]),o($VQ,[2,62],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),{11:$Vi,12:$Vj,28:244,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{17:245,48:$Vh},{11:$Vi,12:$Vj,28:246,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},o($Vg,[2,22]),o($VP,[2,113]),o($Vg,[2,33]),{17:247,48:$Vh},o($Vf,[2,10]),o($V51,[2,15],{43:$V91}),o($Vg,[2,37]),o($Vg,[2,38]),{49:[1,248]},{11:$Vi,12:$Vj,28:249,35:43,36:54,43:$Vk,62:44,68:$Vl,82:$Vm,83:45,84:46,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs},{15:[1,250]},{15:[1,251],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($VQ,[2,60],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($Va1,[2,65]),o($VQ,[2,64],{40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($Vg,[2,20]),{23:[1,252],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($Vf,[2,9]),o($Vg,[2,44]),{15:[1,253],40:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{7:81,9:255,11:$V2,21:$V3,24:$V4,25:9,26:$V5,27:16,30:$V6,31:$V7,32:$V8,33:$V9,34:15,35:17,36:18,37:$Va,45:$Vb,49:$Vb1,50:254,51:$Vc,56:$Vd,58:$Ve},o($Vc1,$Vb1,{25:9,34:15,27:16,35:17,36:18,7:81,9:255,50:256,11:$V2,21:$V3,24:$V4,26:$V5,30:$V6,31:$V7,32:$V8,33:$V9,37:$Va,45:$Vb,51:$Vc,56:$Vd,58:$Ve}),{14:[2,50]},o($Vc1,$Vb1,{25:9,34:15,27:16,35:17,36:18,7:81,9:255,50:257,11:$V2,21:$V3,24:$V4,26:$V5,30:$V6,31:$V7,32:$V8,33:$V9,37:$Va,45:$Vb,51:$Vc,56:$Vd,58:$Ve}),{49:[2,47]},o($Vc1,[2,42],{25:9,34:15,27:16,35:17,36:18,7:132,11:$V2,21:$V3,24:$V4,26:$V5,30:$V6,31:$V7,32:$V8,33:$V9,37:$Va,45:$Vb,51:$Vc,56:$Vd,58:$Ve}),o($Vc1,[2,46]),o($Vc1,[2,45])],
defaultActions: {26:[2,1],205:[2,49],252:[2,50],254:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { ArithmeticOption,Aritmetico} = require('../Expresiones/Aritmetico');
    const {Relacional, RelationalOption} = require('../Expresiones/Relacional');
    const {Logica, LogicaOpcion} = require('../Expresiones/Logica');
    const {Literal} = require('../Expresiones/Literal');
    const {Variable} = require('../Expresiones/Variable');
    const {Unario,OperadorOpcion} = require('../Expresiones/Unario');
    const {Ternario} = require('../Expresiones/Ternario');
    const {AsigArreglo} = require('../Expresiones/AsigArreglo');
    const {Return} = require('../Instruccion/Return');
    const {Console} = require('../Instruccion/Console');
    const {errores,Error_} = require('../Reportes/Errores');
    const { Type } = require("../Modelos/Retorno");
    const {If} = require('../Instruccion/If');
    const {Switch} = require('../Instruccion/Switch');
    const {Declaracion} = require('../Instruccion/Declaracion');
    const {ListDeclaracion} = require('../Instruccion/ListDeclaracion');
    const {Break,Continue,TipoEscape} = require('../Instruccion/BreakContinue');
    const {While,DoWhile} = require('../Instruccion/While');
    const {For} = require('../Instruccion/For');
    const {Instrucciones} = require('../Instruccion/Instrucciones');
    const {InstrucUnaria} = require('../Instruccion/InstrucUnaria');
    const {Funcion} = require('../Instruccion/Funcion');
    const {Llamada} = require('../Instruccion/Llamada');
    const {DecArreglo} = require('../Instruccion/DecArreglo');
    const {Arreglo} = require('../Estructuras/Arreglo');
    const {Acceso} = require('../Estructuras/Acceso');
    const {AccesoAsig} = require('../Estructuras/AccesoAsig');
    const {Length,Pop,Push} = require('../Estructuras/Length');
    const {Simbolo} = require('../Entornos/Environment');
    const {Graficarts} = require('../Reportes/Graficarts');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 85
break;
case 4:return 86
break;
case 5:return 87
break;
case 6:return 63
break;
case 7:return 64
break;
case 8:return 65
break;
case 9:return 88
break;
case 10:return 89
break;
case 11:return 66
break;
case 12:return 'TYPE'   
break;
case 13:return 56
break;
case 14:return 58
break;
case 15:return 21
break;
case 16:return 24
break;
case 17:return 45
break;
case 18:return 47
break;
case 19:return 51
break;
case 20:return 54
break;
case 21:return 55
break;
case 22:return 30
break;
case 23:return 32
break;
case 24:return 33
break;
case 25:return 26
break;
case 26:return 10
break;
case 27:return 37
break;
case 28:return 31
break;
case 29:return 90
break;
case 30:return 91
break;
case 31:return 42
break;
case 32:return 41
break;
case 33:return 92
break;
case 34:return 93
break;
case 35:return 67
break;
case 36:return 68
break;
case 37:return 69
break;
case 38:return 71
break;
case 39:return 72
break;
case 40:return 70
break;
case 41:return 75
break;
case 42:return 76
break;
case 43:return 73
break;
case 44:return 74
break;
case 45:return 77
break;
case 46:return 78
break;
case 47:return 79
break;
case 48:return 80
break;
case 49:return 82
break;
case 50:return 81
break;
case 51:return 15
break;
case 52:return 39  
break;
case 53:return 12
break;
case 54:return 14 
break;
case 55:return 48
break;
case 56:return 49
break;
case 57:return 43
break;
case 58:return 44  
break;
case 59:return 23
break;
case 60:return 18
break;
case 61:return 40
break;
case 62:return 11
break;
case 63:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')))/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:do\b)/,/^(?:null\b)/,/^(?:length\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecucion;
exports.Parser = ejecucion.Parser;
exports.parse = function () { return ejecucion.parse.apply(ejecucion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}